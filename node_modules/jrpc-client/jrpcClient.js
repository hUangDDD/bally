var net=require('net'), assert=require('assert'), debug=require('debug')('jrpc_c'), JsonParser = require('./jsonparse.js');
var EventEmitter =require('events').EventEmitter;
var util = require("util");
util.inherits(JrpcSock, EventEmitter);
function JrpcSock(opt) {
	if (opt==null) opt={};
	EventEmitter.call(this);
	this.callbackTags=[];
	this.callList=[];
	this.connected =false;
	if (opt.autoretry==null) opt.autoretry=1000;
	this.opt=opt;
}

JrpcSock.prototype.connect=function(port, ip) {
	if (arguments.length==1) {
		if (!port) return;
		var ip_port=port.split(':');
		if (ip_port.length==1) {ip=port;port=9002;}
		else {port=ip_port[1]; ip=ip_port[0];}
	}
	if (port==null) return;// callback('port was not specified');
	this.port=port; this.ip=ip;
	return this.reconnect();
}

JrpcSock.prototype.reconnect =function() {
	var self =this;
	this.sock =net.connect(this.port, this.ip, function() {
		self.connected =true;
		self.emit('connected', self.sock);
		self.emit('connect', self.sock);
		self.parser =new JsonParser();
		self.parser.onValue=function(msg) {
			if (!msg) return;
			if (msg.id==null) return debug('recv wrong msg', msg);
			try {
				self.callbackTags[msg.id](msg.error, msg.result);
				delete self.callbackTags[msg.id];
			} catch (err) {
				debug(msg, err.toString());
			}
		}
		for (var i=0; i<self.callList.length; i++) {
			var _call =self.callList[i];
			if (_call) self.sendJrpcCall(_call.fn, _call.params, _call.cb);
		}
		self.callList=[];
	})
	.on('data', function(chunk) {
		self.parser.write(chunk);
	})
	.on('error', function(err) {self.connected =false;if (self.opt.emitErr) self.emit('error', err);})
	.on('close', function(withErr) {
		self.connected=false;self.emit('close', withErr);
		if (!self.opt.autoretry) return self.emit('connect broken');
		setTimeout(function() {self.reconnect()}, self.opt.autoretry);
	})
	.on('end', function() {self.emit('end')});
	
	return this;
}

JrpcSock.prototype.call=function(fn, params, callback) {
	if (!this.connected) {
		if (this.callList.length<5000) return this.callList.push({fn:fn, params:params, cb:callback});
		return callback('callList full');
	}
	this.sendJrpcCall(fn, params, callback);
}

JrpcSock.prototype.sendJrpcCall=function(fn, params, callback) {
	assert(this.sock instanceof net.Socket);
	if (typeof params === 'function') {callback =params; params =[]};
	if (!Array.isArray(params)) params =[params];
	var callObj ={jsonrpc:'2.0', method:fn, params:params};
	if (callback) {
		callObj.id =this.callbackTags.length;
		this.callbackTags.push(callback);
	}
	this.sock.write(JSON.stringify(callObj));
}

module.exports =JrpcSock;

if (module==require.main) {
	var cli =new JrpcSock()
	.on('connect broken', function() {
		console.log('connection broken');
		setTimeout(cli.reconnect.bind(cli), 5000);
	})
	//.on('error', console.log.bind(console, 'err'))
	.on('close', console.log.bind(console, 'close'))
	.on('connected', function() {console.log('connected')});
	
	cli.call('test', console.log);
	cli.connect(9007);
}
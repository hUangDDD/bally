var debug =require('debug')('dota:imbaDB');
var assert =require('assert');
var result = require('./result.js');
var util = require('util');
var Ins = require('../../Ins')
var dcopy =require('deepcopy');
var merge =require('merge');
var mongodbEncode = require('../../Ins').mongodbEncode;
var mongodbDecode = require('../../Ins').mongodbDecode;

var debugIfError;
if (debug.enabled) debugIfError =function(err, result) { if (err) debug(util.inspect(err)); else debug(util.inspect(result));}
else debugIfError=function(){}

var  mdb=require('easyMongo'), createDbJson =mdb.createDbJson, observe =mdb.observe;

function isItem(item) {
	return typeof item ==='object' && !Array.isArray(item) && item.hasOwnProperty('id');
}

function isHero(hero) {
	return typeof hero ==='object' && !Array.isArray(hero) && hero.hasOwnProperty('id');
}

var defaultUser = {
	coin: 1000,
	diamond: 1000,
	nickName:"",
	pwd:"",
	fightPower:2500,
	elo:1200,
	单场贡献值总和:0,
	vipLv:0,
	vipVaildTime:new Date().getTime(),
	winGameCount:0,
	winGameCountObj:{mode0:0,mode1:0,mode2:0,mode3:0},		//mode0:自定义游戏 mode1:匹配 mode2:排位
	totalGameCount:0,
	totalGameCountObj:{mode0:0,mode1:0,mode2:0,mode3:0},
	leaveGameCount:0,		//逃跑
	leaveGameCountObj:{mode0:0,mode1:0,mode2:0,mode3:0},
	noOperGameCount:0,	//挂机
	noOperGameCountObj:{mode0:0,mode1:0,mode2:0,mode3:0},
	duanWei:"无段位",
	duanWeiLv:0,
	paiWeiPhase:"定级赛",
	jinJIPoint:0,
	luckyVal:1,
	faceID:"圣域守卫者·凯伦",
	newPlayerHelpStatus:"",	//新手引导状态
	heros: {},
	heroCount:22,
	strongHeroCount:0,	//满级，强化英雄数量
	bags: {},
	friends:{},
	availbleFaceList: [],
	lastLoginTime:new Date(),
	lastLeaveTime:new Date().getTime(),
	gameIDList:[],							//最近游戏记录id
	MVP:0,					//MVP
	FU:0,					//富
	Chai:0,					//拆
	Yuan:0,					//援
	Sha:0,					//杀
	Yin:0,					//英
	Flee:0,					//逃跑
	TouSu:0,				//投诉
	TouSuList:[],							//被投诉原因，循环记录
	HuoYueDu:0,			//活跃度
	GuaJi:0,				//挂机
	LaHei:0,				//鄙视，拉黑
	HaoPing:0,				//赞，好评
	killHeroCount:0,		//击杀英雄数
	dieCount:0,			//死亡次数
	chaiTaCount:0,			//拆塔数
	twokill:0,				//2杀次数
	threekill:0,			//三杀
	fourkill:0,
	fivekill:0,
	godLikeKillCount:0,			//超神
	freeDiamondCount:0,			//免费获得的钻石数量
	useHornCount:0,				//使用喇叭数量
	useHeroCount:{},
	IDNumber:"",
	emailList:{},					//邮件列表 {emailID:1,t:time,userID:'xxx',bGetPrize:false}
	newEmailCount:0,
	dailyTask:{},					//每日任务
	taskFinMsgList:{},			//任务完成，并且没有通知的任务，获取一次就清空
	taskFinList:{},				//完成的任务列表
	taskPro:{	dayWinCount:0,dayGameCount:0,dayKillHeroCount:0,dayAssistCount:0,
				dayPayToEquip:0,dayBlackTeamMatch:0,dayFirstBlood:0,
				dayGodLikeCount:0,dayBuyLiveWithDiamond:0,dayKillTower:0,dayTitleCount:0,
				continueSign:0,enterShopCount:0,buyHeroCount:0,buySkillCount:0,
				usePotionCount:0,useFuWenTimeCount:0,strongHeroCount:0,matchCount:0,friendsCount:0,
				gameCount:0,winCount:0,gameTotalTime:0,heroCount:20,killHeroCount:0,dieCount:0,
				MVP:0,顽:0,拆:0,富:0,援:0,杀:0,
				fighterPower:0,赞:0,firstRecharge:0,totalRecharge:0,
				lastSignDate:0,	//上次签到时间
				bFinSignToday:false	//今天是否完成过签到
			},					//任务活动相关属性
	测试:{},
	closeTime:0,
	closeReason:"",
	totalLeaveTime:-1,		//累计离线时间
	totalGameTime:-1,		//累计上线时间
	loginTime:0,			//上线时间
	bMan:true				//是否成年
};

module.exports =function (dbp) {
	// param : loginName as string OR {loginName:string, nickName:string}, dbDesc {db:db, col:colName}
	function User(loginName) {
		assert(typeof loginName === 'string');

		this.loginName =loginName;
		this._key ={_id:loginName};
		this._optN ={col:dbp.users, key:this._key, template:defaultUser, projects:{password:0, avaibleFaceList:0}};
		this._optP ={col:dbp.users, key:this._key, template:defaultUser, projects:{password:1}};
		this._optAF ={col:dbp.users, key:this._key, template:defaultUser, projects:{availbleFaceList:1}};
		
		this.content ={};
		this.content.modiIf =function (if_query, modi_content) {
			dbp.flush();
			dbp.update(dbp.users, if_query, { $inc: modi_content } );
		};
		this.content._all =false;
	}

	User.prototype.getLoginNameByNick =function(nick, callback) {
		dbp.users.findOne({nickName:nick}, {_id:1}, function(err, obj) {
			if (err) return callback(err);
			callback(undefined, obj._id);
		});
		/*createDbJson(dbp, {col:dbp.users, key:{nickName:nick}, projection:{_id:1}}, function(err, obj) {
			if (err) return callback(err);
			callback(undefined, obj._id);
		});*/
	}

	User.prototype.getNickByLoginName =function(loginName, callback) {
		dbp.users.findOne({_id:loginName}, {nickName:1}, function(err, obj) {
			if (err) return callback(err);

			callback(undefined, obj.nickName);
		});		
	}

	User.prototype.getUserInfo =function(args) {
		var callback =arguments[arguments.length-1];
		assert(typeof callback === 'function');


		if (this.content._all) return callback(undefined, this.content);
		
		var self = this;
		if (arguments.length ==1) {
			if (this.content._all) return callback(undefined, this.content); 
		}
		else {
			var queryProj =Array.prototype.slice.call(arguments, 0, arguments.length-1);
			queryProj =queryProj.filter(function(name) {
				return !self.content.hasOwnProperty(name);
			});
			if (queryProj.length ==0) return callback(undefined, this.content);
		}
        dbp.flush(function () {
			//Ins.flushCount++;
			//require('../../Title').flushTitle();
			//require('util').debug("flush")

			var proj ={};
			if (queryProj) {
				for (var i =0; i<queryProj.length; i++) proj[queryProj[i]] =1;
			}
			else {
				proj =self._optN;
			}
			dbp.users.findOne(self._key, proj, function(err, obj) {
				if (err) return callback(err, null);
				if (!obj) return callback(new Error('用户不存在'));

				//obj = merge(template,obj);
				/*observe(obj);
				obj._ee.on('change', function(changes) {
					var o = opt;
					var b = obj;
					parseToDbCmd(dbProvider, colName, key, changes);
				});*/
				self.content.__pause && self.content.__pause();
				var mergeWithDefault ={};
				//self.content = merge(self.content, obj);
				// 处理template
				console.log('before merge, cache', self.content);
				console.log('db ret', obj);
				for (var item in proj) {
					//if (!self.content.hasOwnProperty(item)) self.content[item] =dcopy(defaultUser[item]);
					if (obj[item]) {
						if (typeof obj[item] === 'object') mergeWithDefault[item] =merge(dcopy(defaultUser[item]), obj[item]);
						else mergeWithDefault[item] =obj[item];
					}
					else mergeWithDefault[item] =dcopy(defaultUser[item]);
				}
				console.log('wait merge', mergeWithDefault);
				merge(self.content, mergeWithDefault);
				//console.log('after merge cache', self.content);

				//obj.bVip = obj.bags && obj.bags.VIP && obj.bags.VIP.leftTime > new Date().getTime();

				if (arguments.length ==1) self._all =true;
				//self.content.__resume &&  self.content.__resume();
				if (self.content.__resume) {
					self.content.__resume(function() {
						callback(undefined, self.content);
					});
				}
				else {
					callback(undefined, self.content);
				}
			/*
            createDbJson(dbp, queryProj, function (err, obj) {
				//Ins.createDbJsonBack++;
				//require('../../Title').flushTitle();
				//require('util').debug("createDbJsonBack")
                if (err) { debug(err.message); return callback(err);}
                self.content = obj;

				obj.bVip = obj.bags && obj.bags.VIP && obj.bags.VIP.leftTime > new Date().getTime();

                callback(undefined, obj);

            });*/
			});
		});
	}
	
	User.prototype.syncDB =function() {
		dbp.observe(this.content, dbp.users.collectionName, this._key, null);
	}

	User.prototype.changePassword =function(oldPwd, newPwd, callback) {
		if (!callback) callback =debugIfError;
		createDbJson(dbp, this._optP, function(err, obj) {
			if (err) return callback(err);
			obj.password =newPwd;
			callback(undefined, result.OK({newPwd:newPwd}));
		});
	}

	User.prototype._buySomething =function(_item, use, objName, callback) {
		var self =this;
		var item =dcopy(_item);
		if (item.db && item.db.id) {item.id =item.db.id; delete item.db.id}
		//console.log(item.id);
		this.getUserInfo(objName, function(err, obj) {
			var changeCount =true, oldCount, oldTime;
			var _beforeChangeObj =obj[objName][item.id];
			if (item.db && typeof item.db === 'object' && use.leftTime) {
				changeCount=false;
				oldTime =(_beforeChangeObj && _beforeChangeObj.leftTime && _beforeChangeObj.leftTime > new Date().getTime())?_beforeChangeObj.leftTime:0;
			}
			else {
				oldCount =(_beforeChangeObj && _beforeChangeObj.count)?_beforeChangeObj.count:0;
			}
			var key ={_id:self.loginName}, modi={};
			use.count =use.count || 1;
			if (use.diamond) {key.diamond ={$gte:(item.diamond*use.count)}; modi.diamond=-(item.diamond*use.count); };
			if (use.coin) {key.coin ={$gte:(item.coin*use.count)}; modi.coin=-(item.coin*use.count); }
			var halfkey=objName+'.'+item.id+'.';
			var buycount =use.count;
			if (item.db) {
				for (var i in item.db) {
					if (i==='count') buycount =use.count*item.db.count;
					else if (i==='leftTime') {
						if (!use.hasOwnProperty("leftTime")) continue
						if (oldTime===0)
							modi[halfkey+i] =new Date().getTime()+ use.leftTime;
						else
						{
							modi[halfkey+i] =use.leftTime;
						}
					}
					else
						modi[halfkey+i] =item.db[i];
				}
			}
			if (changeCount)
			{
				modi[halfkey+'count']=buycount;
				if (objName == "heros") modi[halfkey+'heroExp']=100;
			}
			if (item['持有上限']) key.count ={$lte:item['持有上限']-buycount};			
			self.content.modiIf(key, modi);
			delete self.content;
			self.getUserInfo(objName, function(err, obj) {
				if (changeCount) {
					if (obj[objName][item.id] && obj[objName][item.id].count!=oldCount)
						return callback(undefined, {result:'ok'});
				}
				else if (obj[objName][item.id] && obj[objName][item.id].leftTime!=oldTime) return callback(undefined, {result:'ok'});
				return callback(undefined, result.Failed(use));
			});
		});

	};

	User.prototype.clearContent = function()
	{
		delete this.content;

	};

	User.prototype.buyItem =function(item, use, callback) {
		assert(isItem(item));
		if (!use || typeof use === 'function') {callback =use; use={coin:true, count:1};}
		if (!callback) callback =debugIfError;

		this._buySomething(item, use, 'bags', callback);

	};

	User.prototype.buyHero =function(hero, use, callback) {
		assert(isHero(hero));
		if (!use || typeof use === 'function') {callback =use; use={coin:true};}
		use.count=1;
		if (!callback)
			callback =debugIfError;
		
		this._buySomething(hero, use, 'heros', callback);

	};

	User.prototype.getAvailableFaceList =function(callback) {
		createDbJson(dbp, this._optAF, function(err, obj) {
			if (err) return debug(err.message);
			callback(undefined, obj.availbleFaceList);
		});

	};
	User.prototype.addFriend =function(friendUser) {
		this.getUserInfo('friends', function(err, result) {
			if (err) return debugIfError(err);
			var frs = result.friends;
			frs._addKey(mongodbEncode(friendUser.loginName));
			frs[mongodbEncode(friendUser.loginName)]=new Date();
		})

	};
	User.prototype.removeFriend =function(user) {

		var d ={};
		d['friends.'+mongodbEncode(user.loginName)] =1;
		dbp.update(dbp.users.collectionName, this._key, {$unset:d});
	};
	
	return User;
};

var debug =require('debug')('dbjson'),
	assert =require('assert');
var _observe =require('./_observe.js');

// aux functions & class


function _noop() {}

/*var observe =require('./observable.js').observe;
require('./observable.js').setChk(function(v) {
	assert(!Buffer.isBuffer(v), '数据库不支持Buffer类型');
	assert(!(typeof v === 'function'), '数据库不支持function类型');

	return true;
});*/
//var O =require('observed');

/*
var defaultUpdateCommandOption ={writeCommand:true};
function doCmd(db, colName, callback) {
	if (_allCmdCache[db][colName].length==0) return;
	callback =callback || function() {};
	db.command({update:colName, updates:_allCmdCache[db][colName]}, defaultUpdateCommandOption, callback);
	_allCmdCache[db][colName]=[];
}*/

// dbJson
var merge = require('deepmerge');

var cc =[], newtick =true;
function observe(obj, path, dbProvider, colName, key) {
	_observe(obj, path, 0, function(chgs) {
		if (newtick) {
			newtick =false;
			process.nextTick(function() {
				for (var i=cc.length-1; i>=0; i--) {
					cc[i].length && parseToDbCmd(dbProvider, colName, key, cc[i]);
				}
				newtick =true;
			});
		}
		if (!cc[chgs.l]) cc[chgs.l] =chgs.e;
		else cc[chgs.l] =cc[chgs.l].concat(chgs.e);
	});
}

function createDbJson(dbProvider, opt, callback) {
	var db =dbProvider.db, cache=dbProvider, col =opt.col, colName =opt.col.collectionName, key=opt.key, template =opt.template||opt.default, projection =opt.projection || {};
	if (key==null) return callback('invalid key');
	if (typeof key!=='object') key={_id:key};
	//if (!cache) cache =new CmdCache(db);
	col.findOne(key, projection, function(err, obj) {
        if (err) return callback(err, null);
        if (!obj) {
			if (opt.alwayscreate) {
				col.insert(key, {w:0});
				obj={};
			}
			else {
				console.log('item not find && alwayscreate not set');
				return callback(new Error(JSON.stringify(key)+' 不存在'));
			}
		}
			
		if (template && typeof template === 'object') obj = merge(template,obj);

		cache.observe(obj, colName, key, opt.path);
		/*observe(obj);
		obj._ee.on('change', function(changes) {
			var o = opt;
			var b = obj;
			parseToDbCmd(dbProvider, colName, key, changes);
		});
        obj.modiIf = function (if_query, modi_content) {
            dbProvider.flush();
            dbProvider.update(colName, if_query, { $inc: modi_content } );
		}
		var cc =[], newtick =true;
		_observe(obj, '', 0, -1, function(chgs) {
			if (newtick) {
				newtick =false;
				process.nextTick(function() {
					for (var i=cc.length-1; i>=0; i--) {
						cc[i].length && parseToDbCmd(dbProvider, colName, key, cc[i]);
					}
					newtick =true;
				});
			}
			if (!cc[chgs.l]) cc[chgs.l] =chgs.e;
			else cc[chgs.l] =cc[chgs.l].concat(chgs.e);
		});*/
		//var ee =O(obj);
		//ee.on('change', function(changes) {
		//});
		callback(null, obj);
	});
}


module.exports ={
	DbProvider:require('./dbLayer.js'),
	//commitCmd: cache.flushAll.bind(cache),
	createDbJson: createDbJson,
//	observe:observe,
//	parseToDbCmd: parseToDbCmd
	dummy:undefined
};

if (module === require.main) {
    var DB = require('./dbLayer.js');
    new DB().init('mongodb://127.0.0.1/imbaol', { exists: ['users'] }, function (err, db) {
        if (err) return console.log(err);

        var opt = { col: db.users, key: { _id: 'user0@sys' } , 'default': { test: {a:1}, _arr:[0, 1, 2, 3]}};
        createDbJson(db, opt, function (err, obj) {
            //console.log(JSON.stringify(obj));
            obj.test.a = {x:1000, y:100};
            //obj._arr = [1, 2, 3, 4,5, 6, 7];
            obj._arr.length = 20;
            //obj._arr.unshift(-1);
			//obj._arr.length =10;
            //console.log(JSON.stringify(obj));

            db.flush(function (err) {
                db.users.findOne(opt.key, console.log);
            });
        });
    });
}